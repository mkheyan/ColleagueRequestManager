@page "/requests/{Id:int}"
@using global::Models
@using Business.Repository.IRepository
@using System.IO
@using Radzen
@using Radzen.Blazor
@using Microsoft.AspNetCore.Http
@using System.Security.Claims

@inject IToDoItemRepository toDoItemRepository
@inject IToDoResponseRepository toDoResponseRepository
@inject IToDoHistoryRepository toDoHistoryRepository
@inject NavigationManager navigationManager
@inject ContextMenuService contextMenuService
@inject IHttpContextAccessor contextAccessor

<div class="row mt-4">
    <div class="col-10">
        <h2 class="card-title text-info">View Request</h2>
    </div>
    <div class="col-2">
        <NavLink href="@($"requests/{Id}/createResponse")" class="btn btn-info">Create Response</NavLink>
        @if(ToDoItemModel.CreatorId == contextAccessor.HttpContext.User.FindFirstValue(ClaimTypes.NameIdentifier))
        {
            <NavLink href="@($"requests/edit/{Id}")" class="btn btn-info" style="margin-left:10px">Edit</NavLink>  
        }
    </div>
</div>

<div class="row mt-2 mb-5">
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <div class="row mt-2 mb-5">
                    <h3 class="card-title text-info mb-3 ml-3">Request Details</h3>
                    <div class="col-md-12">
                        <div class="card">
                            <div class="card-body">
                                <EditForm Model="ToDoItemModel">
                                    <div class="form-group">
                                        <label>Subject</label>
                                        <InputText @bind-Value="ToDoItemModel.Subject" disabled="true" class="form-control"></InputText>
                                    </div>
                                    <div class="form-group">
                                        <label> Creator </label>
                                        <InputText @bind-Value="ToDoItemModel.Creator.FirstName" disabled="true" class="form-control"></InputText>
                                    </div>
                                    <div class="form-group">
                                        <InputText @bind-Value="ToDoItemModel.Creator.LastName" disabled="true" class="form-control"></InputText>
                                    </div>
                                    <div class="form-group">
                                        <InputText @bind-Value="ToDoItemModel.Creator.Email" disabled="true" class="form-control"></InputText>
                                    </div>
                                    <div class="form-group">
                                        <label>Assignee</label>
                                        @if (ToDoItemModel.Assignee != null)
                                        {
                                            <InputText @bind-Value="ToDoItemModel.Assignee.Email" disabled="true" class="form-control"></InputText>
                                        }
                                        else
                                        {
                                            <InputText disabled="true" @bind-Value="noAssignee" class="form-control"></InputText>
                                        }
                                    </div>
                                    <div class="form-group">
                                        <label>Creation Date</label>
                                        <InputDate @bind-Value="ToDoItemModel.CreationDate" disabled="true" class="form-control"></InputDate>
                                    </div>
                                    <div class="form-group">
                                        <label>Last Modified Date</label>
                                        <InputDate @bind-Value="ToDoItemModel.LastModifiedDate" disabled="true" class="form-control"></InputDate>
                                    </div>
                                    <div class="form-group">
                                        <label>Necessary Completion Date</label>
                                        <InputDate @bind-Value="ToDoItemModel.NecessaryCompletionDate" disabled="true" class="form-control"></InputDate>
                                    </div>
                                    <div class="form-group">
                                        <label>Is Complete</label>
                                        <RadzenCheckBox @bind-Value=@ToDoItemModel.IsComplete TValue="bool" Disabled="true"/>
                                    </div>
                                    <div class="form-group">
                                        <label>Description</label>
                                        <div class="col-xl-6">
                                            <div class="border" style="box-shadow: azure">
                                                @((MarkupString)ToDoItemModel.Description)
                                            </div>
                                        </div>
                                    </div>

                                    <div class="form-group" style="padding-top: 70px;">
                                        <div class="row">
                                            @if (ToDoItemModel.Attachments != null && ToDoItemModel.Attachments.Count > 0)
                                            {
                                                int serial = 1;
                                                foreach (var file in ToDoItemModel.Attachments)
                                                {
                                                    var url = file.AttachmentUrl;
                                                    <RadzenIcon Icon="description" />
                                                    <NavLink href="@url">@file.OriginalName</NavLink>
                                                    <br/>

                                                    serial++;
                                                }
                                            }
                                        </div>
                                    </div>
                                </EditForm>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="card-body">
                <div class="row mt-2 mb-5">
                    <h3 class="card-title text-info mb-3 ml-3">Responses</h3>
                    <RadzenDataGrid @ref="responseGrid" AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                                    Data="displayResponseData" TItem="ToDoResponseDto" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or"
                                    SelectionMode="DataGridSelectionMode.Single" @bind-Value=@selectedResponse CellContextMenu="@OnCellContextMenu">
                        <Columns>
                            <RadzenDataGridColumn TItem="ToDoResponseDto" Context="data" Property="ResponderId" Sortable=true SortProperty="Responder.LastName" Title="Responder" Width="140px">
                                <Template>
                                    @data.Responder?.FirstName @data.Responder?.LastName
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="ToDoResponseDto" Property="CreationDate" Sortable=true Title="Creation Date" Width="200px" />
                            <RadzenDataGridColumn TItem="ToDoResponseDto" Property="LastModifiedDate" Sortable=true Title="Last Modified Date" Width="200px" />
                            <RadzenDataGridColumn TItem="ToDoResponseDto" Context="data" Property="ResponseText" Sortable=true Title="Response" Width="200px">
                                <Template>
                                    @((MarkupString)data.ResponseText)
                                </Template>
                            </RadzenDataGridColumn>
                        </Columns>
                    </RadzenDataGrid>
                </div>
            </div>
            <div class="card-body">
                <div class="row mt-2 mb-5">
                    <h3 class="card-title text-info mb-3 ml-3">History</h3>
                    <RadzenDataGrid @ref="historyGrid" AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                                    Data="displayHistoryData" TItem="ToDoHistoryDto" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or">
                        <Columns>
                            <RadzenDataGridColumn TItem="ToDoHistoryDto" Context="data" Property="UserId" Sortable=true SortProperty="User.LastName" Title="Name" Width="140px">
                                <Template>
                                    @data.User?.FirstName @data.User?.LastName
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="ToDoHistoryDto" Context="data" Property="UserId" Sortable=true SortProperty="User.Email" Title="Email" Width="140px">
                                <Template>
                                    @data.User?.Email
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="ToDoHistoryDto" Property="ActionType" Sortable=true Title="Action Type" Width="200px" />
                            <RadzenDataGridColumn TItem="ToDoHistoryDto" Property="ActionDateTime" Sortable=true Title="Action Date" Width="200px" />
                        </Columns>
                    </RadzenDataGrid>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    private ToDoItemDto ToDoItemModel { get; set; } = new ToDoItemDto();
    RadzenDataGrid<ToDoResponseDto> responseGrid { get; set; }
    RadzenDataGrid<ToDoHistoryDto> historyGrid { get; set; }
    IList<ToDoResponseDto> displayResponseData;
    IList<ToDoResponseDto> selectedResponse;
    IList<ToDoHistoryDto> displayHistoryData;

    private string noAssignee = "This item does not have an assignee";

    protected override async Task OnInitializedAsync()
    {
        if (!authenticationState.Result.User.Identity.IsAuthenticated)
        {
            var uri = new Uri(navigationManager.Uri);
            navigationManager.NavigateTo($"/identity/account/login?returnUrl={uri.LocalPath}");
        }
        ToDoItemModel = await toDoItemRepository.GetToDoItem(Id);
        var displayResponseDataResult = await toDoResponseRepository.GetAllToDoResponsesForItem(ToDoItemModel.Id);
        if (displayResponseDataResult != null)
        {
            displayResponseData = displayResponseDataResult.ToList();
        }
        var displayHistoryDataResult = await toDoHistoryRepository.GetAllToDoHistoryForItem(ToDoItemModel.Id);
        if (displayHistoryDataResult != null)
        {
            displayHistoryData = displayHistoryDataResult.ToList();
        }
    }

    protected async Task OnCellContextMenu(DataGridCellMouseEventArgs<ToDoResponseDto> args)
    {
        selectedResponse = new List<ToDoResponseDto>() { args.Data };

        contextMenuService.Open(args,
            new List<ContextMenuItem> {
                new ContextMenuItem(){Text = "View", Value = 0},
                new ContextMenuItem(){ Text = "Edit", Value = 1 },
                    }, async (e) =>
            {
                if (e.Value.ToString() == "0")
                {
                    navigationManager.NavigateTo($"requests/{args.Data.ToDoItemId}/viewResponse/{args.Data.Id}");
                    contextMenuService.Close();
                }
                if (e.Value.ToString() == "1")
                {
                    navigationManager.NavigateTo($"requests/{args.Data.ToDoItemId}/editResponse/{args.Data.Id}");
                    contextMenuService.Close();
                }
            }
            );
        StateHasChanged();
    }

}
